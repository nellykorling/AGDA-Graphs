open import Data.Nat using (ℕ; _+_)
open import Data.Nat.Properties using (1+n≢n)
open import Data.Fin using (Fin)
open import Data.Fin.Base using (toℕ; inject₁)
open import Data.Fin.Properties using (toℕ-inject₁)
open import Relation.Binary.PropositionalEquality using (_≡_; refl; sym; trans; cong)



module Lemmas where

suc≢inject₁ : ∀ {n : ℕ} {i : Fin n} → Fin.suc i ≡ inject₁ i → ⊥
suc≢inject₁ i+1≡i = 1+n≢n (trans (cong toℕ (i+1≡i)) (toℕ-inject₁ _))
